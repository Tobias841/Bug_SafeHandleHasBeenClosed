using System;

namespace PBI7223_JwtToken_InvalidEveryOtherTime
{
    class Program
    {
        static void Main(string[] args)
        {
            //PROBLEM DESCRIPTION:
            //The created JWT token validates correctly every other time.
            //If using System.IdentityModel.Tokens.Jwt version 5.6, this validates correctly every time.

            var jwtToken = TestJwtTokenGenerator.GetJwtToken();  //NOTE: simulates the JWT token generated by a third party server in production. There is no difference from the production generated JWT token and the public/private keys used there. Validation fails every second time.

            for (int i = 1; i <= 4; i++)
            {
                SafeValidate(jwtToken, i);
            }

            Console.ReadLine();
        }

        private static void SafeValidate(string jwtToken, int counter)
        {
            try
            {
                JwtTokenValidator.Validate(jwtToken);
                WriteHeader(counter, wasSuccess: true);
            }
            catch (Exception e)
            {
                WriteHeader(counter, wasSuccess: false);
                Console.WriteLine(e.Message);
                Console.WriteLine();
            }
        }

        private static void WriteHeader(int counter, bool wasSuccess)
        {
            Console.BackgroundColor = wasSuccess ? ConsoleColor.DarkGreen : ConsoleColor.Red;
            var validationResult = wasSuccess ? "Validated ok!" : "Validation exception occured!";
            Console.ForegroundColor = ConsoleColor.Black;
            Console.WriteLine($"Validation count {counter}. {validationResult}");
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.White;
        }
    }

   
}
